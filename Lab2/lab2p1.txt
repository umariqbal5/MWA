1. What will be the order of execution between setImmediate(callback) and setTimeout (callback, 0) 

setImmediate() and setTimeout() are similar, but behave in different ways depending on when they are called.
For example, if we run the following script which is not within an I/O cycle (i.e. the main module), the order in which the two timers are executed is non-deterministic, as it is bound by the performance of the process:
However, if you move the two calls within an I/O cycle, the immediate callback is always executed first.
The main advantage to using setImmediate() over setTimeout() is setImmediate() will always be executed before any timers if scheduled within an I/O cycle, independently of how many timers are present.


2. Explain the difference between process.nextTick and setlmmediate? What will be the execution order? 

The process.nextTick() is not technically part of the event loop. Instead, the nextTickQueue will be processed after the current operation is completed, regardless of the current phase of the event loop.
any time you call process.nextTick() in a given phase, all callbacks passed to process.nextTick() will be resolved before the event loop continues. This can create some bad situations because it allows you to "starve" your I/O by making recursive process.nextTick() calls, which prevents the event loop from reaching the poll phase.

3. Name 10 core modules that Node provides by default. 

events	To handle events
fs	    To handle the file system
http	  To make Node.js act as an HTTP server
https	  To make Node.js act as an HTTPS server.
net	    To create servers and clients
os	    Provides information about the operation system
path	  To handle file paths
stream	To handle streaming data
timers	To execute a function after a given number of milliseconds
zlib	  To compress or decompress files
url	    To parse URL strings
util	  To access utility functions
crypto	To handle OpenSSL cryptographic functions
